=> hello.lp:
require open pipe.encoding.lhol pipe.encoding.propositional_connectives;
require pipe.spec;
symbol hello!1 : @Prf (@imp (disj (not pipe.spec.P) (disj (not pipe.spec.Q) (conj pipe.spec.P pipe.spec.Q))) (@imp (disj (not pipe.spec.P) (disj (not pipe.spec.Q) (conj pipe.spec.P pipe.spec.Q))) (imp pipe.spec.P (imp pipe.spec.Q (conj pipe.spec.P pipe.spec.Q))))) ≔
begin
  why3;
end;
symbol hello!2 : @Prf (@imp (disj (not pipe.spec.P) (disj (not pipe.spec.Q) (conj pipe.spec.P pipe.spec.Q))) (@imp (disj (not pipe.spec.P) (disj (not pipe.spec.Q) (conj pipe.spec.P pipe.spec.Q))) (imp pipe.spec.P (imp pipe.spec.Q (conj pipe.spec.P pipe.spec.Q))))) ≔
begin
  why3;
end;
symbol hello!3 : @Prf (@imp (disj pipe.spec.P (disj (not pipe.spec.P) (not pipe.spec.Q))) (@imp (disj pipe.spec.Q (disj (not pipe.spec.P) (not pipe.spec.Q))) (disj (not pipe.spec.P) (disj (not pipe.spec.Q) (conj pipe.spec.P pipe.spec.Q))))) ≔
begin
  why3;
end;
symbol hello!4 : @Prf (@imp (disj pipe.spec.P (disj (not pipe.spec.P) (not pipe.spec.Q))) (@imp (disj pipe.spec.Q (disj (not pipe.spec.P) (not pipe.spec.Q))) (disj (not pipe.spec.P) (disj (not pipe.spec.Q) (conj pipe.spec.P pipe.spec.Q))))) ≔
begin
  why3;
end;
symbol hello!5 : @Prf (disj pipe.spec.P (disj (not pipe.spec.P) (not pipe.spec.Q))) ≔
begin
  why3;
end;
symbol hello!6 : @Prf (disj pipe.spec.Q (disj (not pipe.spec.P) (not pipe.spec.Q))) ≔
begin
  why3;
end;
=> checked
