International Allegro CL Enterprise Edition
10.1 [64-bit Linux (x86-64)] (Nov 14, 2020 18:29)
Copyright (C) 1985-2017, Franz Inc., Oakland, CA, USA.  All Rights Reserved.

This dynamic runtime copy of Allegro CL was built by:
   [TC21720] SRI International

;; Optimization settings: safety 1, space 1, speed 3, debug 1.
;; For a complete description of all compiler switches given the
;; current optimization settings evaluate (explain-compiler-settings).
;;---
;; Current reader case mode: :case-sensitive-lower
Warning: Ignoring declaration of unrecognized ftype:
         (function (some-pvs-type some-pvs-type) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (some-pvs-type some-pvs-type) *)
          some-pvs-type-eq)
Warning: Ignoring declaration of unrecognized ftype:
         (function (signature stream) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function: (ftype (function (signature stream) *) dump)
Warning: Ignoring declaration of unrecognized ftype:
         (function (stream * expr * type-expr) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (stream * expr * type-expr) *) pp-dk-recursor)
Warning: Ignoring declaration of unrecognized ftype:
         (function (stream symbol expr name type-expr) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (stream symbol expr name type-expr) *)
          pp-nat-recursor)
Warning: Ignoring declaration of unrecognized ftype:
         (function (syntax string) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function: (ftype (function (syntax string) *) to-dk3)
Warning: Ignoring declaration of unrecognized ftype:
         (function (var-decl) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function: (ftype (function (var-decl) *) handle-var-decl)
Warning: Ignoring declaration of unrecognized ftype:
         (function (stream * &optional boolean boolean) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (stream * &optional boolean boolean) *)
          pp-type)
Warning: Ignoring declaration of unrecognized ftype:
         (function (binding stream &optional boolean) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (binding stream &optional boolean) *)
          pprint-binding)
Warning: Ignoring declaration of unrecognized ftype:
         (function (* list list stream &key (wrap boolean)) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (* list list stream &key (wrap boolean)) *)
          pprint-formals)
Warning: Ignoring declaration of unrecognized ftype:
         (function (symbol stream string) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (symbol stream string) *) pprint-reqopen)
Warning: Ignoring declaration of unrecognized ftype:
         (function (list stream) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function: (ftype (function (list stream) *) pprint-telescope)
Warning: Ignoring declaration of unrecognized ftype:
         (function (symbol (or type-expr null) stream &key (mod-id *)
                    (actuals list) (wrap boolean))
                   *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype
          (function (symbol (or type-expr null) stream &key (mod-id *)
                     (actuals list) (wrap boolean))
                    *)
          pprint-name)
Warning: Ignoring declaration of unrecognized ftype:
         (function (string string) *)
Warning: The type subform of the ftype declaration must be a subtype of
         function:
         (ftype (function (string string) *) prettyprint-dedukti)

*** 
*** Processing std.pvs (14:41:57 12/16/2021)
*** Generated by proveit 7.1.0 (Nov 05, 2020)
*** 
Installing rewrite rule sets.singleton_rew (all instances)
simple_imp :  

  |-------
{1}   P IMPLIES P
{"name":"simple_imp","incr":1,"path":"root","dk":"P \u21d2 (\u03bb _v0: Prf P,P)","tac":null}
Rerunning step: (flatten)
{"name":"simple_imp","incr":2,"path":"root","dk":"P \u21d2 (\u03bb _v1: Prf P,P)","tac":null}
{"name":"simple_imp","incr":3,"path":"0","dk":"(\u00ac P) \u2228 (\u03bb _v2: Prf (\u00ac (\u00ac P)),P)","tac":["propax"]}
{"name":"simple_imp","incr":4,"path":"root","dk":"P \u21d2 (\u03bb _v3: Prf P,P)","tac":["flatten"]}
Applying disjunctive simplification to flatten sequent,
Q.E.D.


Run time  = 0.02 secs.
Real time = 0.03 secs.

Installing rewrite rule sets.singleton_rew (all instances)
modus_ponens :  

  |-------
{1}   (P IMPLIES Q) IMPLIES P IMPLIES Q
{"name":"modus_ponens","incr":5,"path":"root","dk":"(P \u21d2 (\u03bb _v5: Prf P,Q)) \u21d2 (\u03bb _v4: Prf (P \u21d2 (\u03bb _v6: Prf P,Q)),P \u21d2 (\u03bb _v7: Prf P,Q))","tac":null}
Rerunning step: (flatten)
{"name":"modus_ponens","incr":6,"path":"root","dk":"(P \u21d2 (\u03bb _v9: Prf P,Q)) \u21d2 (\u03bb _v8: Prf (P \u21d2 (\u03bb _va: Prf P,Q)),P \u21d2 (\u03bb _vb: Prf P,Q))","tac":null}
{"name":"modus_ponens","incr":7,"path":"0","dk":"(\u00ac (P \u21d2 (\u03bb _vd: Prf P,Q))) \u2228 (\u03bb _vc: Prf (\u00ac (\u00ac (P \u21d2 (\u03bb _ve: Prf P,Q)))),(\u00ac P) \u2228 (\u03bb _vf: Prf (\u00ac (\u00ac P)),Q))","tac":null}
Applying disjunctive simplification to flatten sequent,
this simplifies to: 
modus_ponens :  

{-1}  (P IMPLIES Q)
{-2}  P
  |-------
{1}   Q
{"name":"modus_ponens","incr":8,"path":"0","dk":"(\u00ac (P \u21d2 (\u03bb _vh: Prf P,Q))) \u2228 (\u03bb _vg: Prf (\u00ac (\u00ac (P \u21d2 (\u03bb _vi: Prf P,Q)))),(\u00ac P) \u2228 (\u03bb _vj: Prf (\u00ac (\u00ac P)),Q))","tac":null}
Rerunning step: (split)
Splitting conjunctions,
this yields  2 subgoals: 
modus_ponens.1 :  

{-1}  Q
[-2]  P
  |-------
[1]   Q
{"name":"modus_ponens","incr":9,"path":"0.0","dk":"(\u00ac Q) \u2228 (\u03bb _vk: Prf (\u00ac (\u00ac Q)),(\u00ac P) \u2228 (\u03bb _vl: Prf (\u00ac (\u00ac P)),Q))","tac":["propax"]}
which is trivially true.

This completes the proof of modus_ponens.1.

modus_ponens.2 :  

[-1]  P
  |-------
{1}   P
[2]   Q
{"name":"modus_ponens","incr":10,"path":"0.1","dk":"P \u2228 (\u03bb _vm: Prf (\u00ac P),(\u00ac P) \u2228 (\u03bb _vn: Prf (\u00ac (\u00ac P)),Q))","tac":["propax"]}
which is trivially true.

This completes the proof of modus_ponens.2.

Q.E.D.


Run time  = 0.04 secs.
Real time = 0.05 secs.

Installing rewrite rule sets.singleton_rew (all instances)
fa_hyp :  

  |-------
{1}   (FORALL (n: nat): P IMPLIES (even(n))) IMPLIES P IMPLIES P
{"name":"fa_hyp","incr":11,"path":"root","dk":"(\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _vp: Prf P,even n))) \u21d2 (\u03bb _vo: Prf (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _vq: Prf P,even n))),P \u21d2 (\u03bb _vr: Prf P,P))","tac":null}
Rerunning step: (flatten)
{"name":"fa_hyp","incr":12,"path":"root","dk":"(\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _vt: Prf P,even n))) \u21d2 (\u03bb _vs: Prf (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _vu: Prf P,even n))),P \u21d2 (\u03bb _vv: Prf P,P))","tac":null}
{"name":"fa_hyp","incr":13,"path":"0","dk":"(\u00ac (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _vx: Prf P,even n)))) \u2228 (\u03bb _vw: Prf (\u00ac (\u00ac (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _vy: Prf P,even n))))),(\u00ac P) \u2228 (\u03bb _vz: Prf (\u00ac (\u00ac P)),P))","tac":["propax"]}
{"name":"fa_hyp","incr":14,"path":"root","dk":"(\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v11: Prf P,even n))) \u21d2 (\u03bb _v10: Prf (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v12: Prf P,even n))),P \u21d2 (\u03bb _v13: Prf P,P))","tac":["flatten"]}
Applying disjunctive simplification to flatten sequent,
Q.E.D.


Run time  = 0.04 secs.
Real time = 0.05 secs.

Installing rewrite rule sets.singleton_rew (all instances)
fa_instantiate :  

  |-------
{1}   (FORALL (n: nat): P IMPLIES even(n)) IMPLIES P IMPLIES even(zero)
{"name":"fa_instantiate","incr":15,"path":"root","dk":"(\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v15: Prf P,even n))) \u21d2 (\u03bb _v14: Prf (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v16: Prf P,even n))),P \u21d2 (\u03bb _v17: Prf P,even zero))","tac":null}
Rerunning step: (flatten)
{"name":"fa_instantiate","incr":16,"path":"root","dk":"(\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v19: Prf P,even n))) \u21d2 (\u03bb _v18: Prf (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v1a: Prf P,even n))),P \u21d2 (\u03bb _v1b: Prf P,even zero))","tac":null}
{"name":"fa_instantiate","incr":17,"path":"0","dk":"(\u00ac (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v1d: Prf P,even n)))) \u2228 (\u03bb _v1c: Prf (\u00ac (\u00ac (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v1e: Prf P,even n))))),(\u00ac P) \u2228 (\u03bb _v1f: Prf (\u00ac (\u00ac P)),even zero))","tac":null}
Applying disjunctive simplification to flatten sequent,
this simplifies to: 
fa_instantiate :  

{-1}  (FORALL (n: nat): P IMPLIES even(n))
{-2}  P
  |-------
{1}   even(zero)
{"name":"fa_instantiate","incr":18,"path":"0","dk":"(\u00ac (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v1h: Prf P,even n)))) \u2228 (\u03bb _v1g: Prf (\u00ac (\u00ac (\u2200 [nat](\u03bb n:El nat,P \u21d2 (\u03bb _v1i: Prf P,even n))))),(\u00ac P) \u2228 (\u03bb _v1j: Prf (\u00ac (\u00ac P)),even zero))","tac":null}
Rerunning step: (instantiate - "zero")
Instantiating the top quantifier in - with the terms: 
 zero,
this simplifies to: 
fa_instantiate :  

{-1}  P IMPLIES even(zero)
[-2]  P
  |-------
[1]   even(zero)
{"name":"fa_instantiate","incr":19,"path":"0.0","dk":"(\u00ac (P \u21d2 (\u03bb _v1l: Prf P,even zero))) \u2228 (\u03bb _v1k: Prf (\u00ac (\u00ac (P \u21d2 (\u03bb _v1m: Prf P,even zero)))),(\u00ac P) \u2228 (\u03bb _v1n: Prf (\u00ac (\u00ac P)),even zero))","tac":null}
Rerunning step: (split)
Splitting conjunctions,
this yields  2 subgoals: 
fa_instantiate.1 :  

{-1}  even(zero)
[-2]  P
  |-------
[1]   even(zero)
{"name":"fa_instantiate","incr":20,"path":"0.0.0","dk":"(\u00ac (even zero)) \u2228 (\u03bb _v1o: Prf (\u00ac (\u00ac (even zero))),(\u00ac P) \u2228 (\u03bb _v1p: Prf (\u00ac (\u00ac P)),even zero))","tac":["propax"]}
which is trivially true.

This completes the proof of fa_instantiate.1.

fa_instantiate.2 :  

[-1]  P
  |-------
{1}   P
[2]   even(zero)
{"name":"fa_instantiate","incr":21,"path":"0.0.1","dk":"P \u2228 (\u03bb _v1q: Prf (\u00ac P),(\u00ac P) \u2228 (\u03bb _v1r: Prf (\u00ac (\u00ac P)),even zero))","tac":["propax"]}
which is trivially true.

This completes the proof of fa_instantiate.2.

Q.E.D.


Run time  = 0.07 secs.
Real time = 0.08 secs.


 Proof summary for theory std
    simple_imp............................proved - complete   [shostak](0.02 s)
    modus_ponens..........................proved - complete   [shostak](0.04 s)
    fa_hyp................................proved - complete   [shostak](0.04 s)
    fa_instantiate........................proved - complete   [shostak](0.07 s)
    Theory totals: 4 formulas, 4 attempted, 4 succeeded (0.18 s)

Grand Totals: 4 proofs, 4 attempted, 4 succeeded (0.18 s)
